{"ast":null,"code":"var _jsxFileName = \"/Users/wadimseminsky/Downloads/Github/llama/llama-2-70b-chat/drawing-app/src/components/Gallery.js\",\n  _s = $RefreshSig$();\n// src/components/Gallery.js\nimport React, { useEffect, useState } from 'react';\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\nimport { firestore } from '../firebaseConfig'; // Import firestore from your config\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gallery = () => {\n  _s();\n  const [drawings, setDrawings] = useState([]);\n  const [loading, setLoading] = useState(true); // State to track loading\n\n  useEffect(() => {\n    // Create a query to get drawings ordered by createdAt\n    const drawingsQuery = query(collection(firestore, 'drawings'),\n    // Access the 'drawings' collection\n    orderBy('createdAt', 'desc') // Order by 'createdAt' field\n    );\n\n    // Subscribe to the Firestore collection\n    const unsubscribe = onSnapshot(drawingsQuery, snapshot => {\n      const fetchedDrawings = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setDrawings(fetchedDrawings);\n      setLoading(false); // Set loading to false once data is fetched\n    }, error => {\n      console.error(\"Error fetching drawings: \", error); // Error handling for snapshot listener\n      setLoading(false); // Ensure loading is set to false even on error\n    });\n    return () => unsubscribe(); // Cleanup subscription on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading drawings...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : drawings.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No drawings available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : drawings.map(drawing => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: drawing.url,\n        alt: \"User drawing\",\n        style: {\n          maxWidth: '100%',\n          height: 'auto',\n          border: '1px solid #ccc',\n          borderRadius: '5px'\n        } // Added styles for better presentation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Drawn by: \", drawing.displayName || 'Anonymous']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), \" \"]\n    }, drawing.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Gallery, \"3vEGa7JuUu6ZwqR7nuobKGE4qDo=\");\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","useEffect","useState","collection","query","orderBy","onSnapshot","firestore","jsxDEV","_jsxDEV","Gallery","_s","drawings","setDrawings","loading","setLoading","drawingsQuery","unsubscribe","snapshot","fetchedDrawings","docs","map","doc","id","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","drawing","style","marginBottom","textAlign","src","url","alt","maxWidth","height","border","borderRadius","displayName","_c","$RefreshReg$"],"sources":["/Users/wadimseminsky/Downloads/Github/llama/llama-2-70b-chat/drawing-app/src/components/Gallery.js"],"sourcesContent":["// src/components/Gallery.js\nimport React, { useEffect, useState } from 'react';\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\nimport { firestore } from '../firebaseConfig'; // Import firestore from your config\n\nconst Gallery = () => {\n  const [drawings, setDrawings] = useState([]);\n  const [loading, setLoading] = useState(true); // State to track loading\n\n  useEffect(() => {\n    // Create a query to get drawings ordered by createdAt\n    const drawingsQuery = query(\n      collection(firestore, 'drawings'), // Access the 'drawings' collection\n      orderBy('createdAt', 'desc') // Order by 'createdAt' field\n    );\n\n    // Subscribe to the Firestore collection\n    const unsubscribe = onSnapshot(drawingsQuery, snapshot => {\n      const fetchedDrawings = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setDrawings(fetchedDrawings);\n      setLoading(false); // Set loading to false once data is fetched\n    }, (error) => {\n      console.error(\"Error fetching drawings: \", error); // Error handling for snapshot listener\n      setLoading(false); // Ensure loading is set to false even on error\n    });\n\n    return () => unsubscribe(); // Cleanup subscription on unmount\n  }, []);\n\n  return (\n    <div>\n      <h2>Gallery</h2>\n      {loading ? (\n        <p>Loading drawings...</p>\n      ) : drawings.length === 0 ? (\n        <p>No drawings available</p>\n      ) : (\n        drawings.map(drawing => (\n          <div key={drawing.id} style={{ marginBottom: '20px', textAlign: 'center' }}>\n            <img\n              src={drawing.url}\n              alt=\"User drawing\"\n              style={{ maxWidth: '100%', height: 'auto', border: '1px solid #ccc', borderRadius: '5px' }} // Added styles for better presentation\n            />\n            <p>Drawn by: {drawing.displayName || 'Anonymous'}</p> {/* Show display name or fallback to 'Anonymous' */}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Gallery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}